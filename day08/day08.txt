C语言里可以采用分组方式管理语句
我们把每个分组叫做一个函数(function)

多函数程序执行时需要对时间进行划分
    时间划分需要遵守如下规则
1.整个程序的执行时间被分成几段，不同时间段被分配给不同的函数使用
2.所有时间段之间不能重叠并且必须连续
3.如果函数A在执行过程中把一段时间分配给函数B使用
    则函数B在完成所有工作之后必须把后面的时间还给函数A

函数()                   时间分配
function2()               ******
function1()         ******      ******
main()        ******                  ******

如果函数A在执行过程中把自己的时间分配给函数B使用就表示他们之间存在函数调用关系
在这个关系里函数A叫做调用函数，函数B叫做被调用函数
在被调用函数工作的时间范围内函数调用关系才存在
调用函数里编写函数调用语句可以产生函数调用关系

不可以跨函数使用变量
不同函数里的变量可以重名
如果一个函数多次执行则每次执行的时候
    它里面的变量代表的存储区都可能不同
声明变量的时候可以使用volatile关键字
    使用这个关键字声明的变量可以被其他程序修改

函数调用过程中通常会伴随着两个函数之间的数据传递
数据传递存在两个完全相反的方向
    可以从调用函数向被调用函数传递数据
    也可以从被调用函数向调用函数传递数据
任何方向的数据传递都使用的被调用函数提供的存储区

只能从被调用函数向调用函数传递一个数据
这个数据叫做被调用函数的返回值
只有在被调用函数结束的时候才能传递返回值
被调用函数里使用return关键字指定返回值的数值
被调用函数把返回值记录在一个专门的存储区里   
    被调用函数需要把这个存储区类型写在被调用函数前面
调用函数里把函数调用语句当作数字使用就
    可以得到被调用函数的返回值

如果被调用函数里没有使用return关键字设置返回值数
    则存放返回值的存储区里内容是随机的
调用函数只有一次获得返回值的机会
    得到返回值以后或者立刻使用或者转存到其他存储区里
如果函数不提供返回值就需要在函数名称前面写void
    这表示函数不提供用来记录返回值的存储区
如果函数名称前什么都没有在C89规范里表示函数有一个整数类型的存储区用来存放返回值
    在C99规范里不允许这样
被调用函数不可以使用数组记录返回值

可以从调用函数向被调用函数传递任意多个数据
    这些数据的类型也是任意的
被调用函数需要为每个数据提供一个同类型的存储区
在被调用函数名称后面的小括号里写一组变量声明语句
    相邻的变量声明语句用逗号分开
这些变量就代表了用来传递数据的那些存储区
这些变量就做函数的形式参数
    小括号里的所有内容叫做函数的形式参数列表
每个形式参数都必须有自己的类型名称
被调用函数里可以象使用变量一样使用形式参数
    每个形式参数代表调用函数传递过来的一个数字
函数调用语句的小括号需要为每个形式参数提供一个对应的数字
    这些数字会被传递给被调用函数
这些数字叫做实际参数
只要能当作数字使用的内容都可以作为实际参数使用
如果函数不提供形式参数就需要在小括号里写void
如果小括号里什么都没有表示函数可以提供任意多个不同类型的形式参数


    预习:
        1.函数
        2.递归函数
        3.作用域和生命周期
        4.全局变量和局部变量













