如果一个表达式里多个数字的类型不同就
    必须首先转换成同一个类型然后才能计算
这个转换过程叫隐式类型转换，由计算机完成
隐式类型转换中一定把占地小的类型转换成占地大的类型
如果不同类型的大小一样就把整数类型转换成浮点型类型
    把有符号类型转换成无符号类型

C语言里可以随时给一个数字指定一个类型
    这叫做强制类型转换
强制类型转换格式如下
(char)300
强制类型转换有可能造成数据丢失
类型转换不会修改现有存储区的内容
    计算机会分配一个新的存储区记录转换后的数字

分支结构可以从几组语句中选择一组执行而忽略其他组
如果程序中遇到多种可能性，每种可能性需要专门的语句处理就可以使用分支语句

if关键字可以用来编写分支
if分支里需要为每种可能性编写对应的处理语句
if分支里需要为每组语句编写配对的逻辑表达式
    当某个逻辑表达式为真的时候就执行它配对的语句
有可能同时执行的语句不可以包含在一个分支里
编写if分支之前必须首先确定有多少个可能性

如果分支中一定要执行一组语句就可以省略
    最后一组语句的逻辑表达式和if关键字
如果if分支中多个逻辑表达式同时为真就
    执行其中前一个逻辑表达式对应的语句
    而忽略后面的逻辑表达式
编写分支语句的时候应该把逻辑表达式简单的写在前面


如果一个分支里包含有限个整数，每个整数都要使用专门的语句处理就可以用
switch...case格式编写分支解决

switch(表达式)
    {
        case 1:
            语句1...
            break
        case 2:
            语句2...
            break
        case 3:
            语句3...
            break
        default:
            默认语句...
            break
    }

循环可以让一组语句反复多次执行
for关键字可以用来编写循环
for循环里可以让一个变量依次代表一组数字
然后使用一组语句处理它所代表的每个数字
这个变量叫做循环变量
采用如下结构描述循环变量的变化过程
(把开始数字赋值给循环变量;
 用逻辑表达式描述循环变量和结束数字的关系;
 循环变量每次的变化规律
 )
编写for循环之前必须使用一组数字的变化过程描述问题

假设有如下的for循环
for(1;2;3)
{
    4
}

它按照一下方式分组执行
[1,2][4,3,2][4,3,2]...[4,3,2]
第一组和其他组都不同
正常情况下for循环应该在两组之间结束
如果某一组最后编号为2的逻辑表达式结果为假就立即结束循环
如果for循环正常结束则结束后循环变量一定落在指定数字范围之外
for循环有可能不执行大括号里面的语句
for循环小括号里任何部分都可以省略
如果省略小括号中间的逻辑表达式就表示逻辑表达式结果永远为真
这种循环不能正常结束，它们叫做死循环

小括号里最前面和最后面的部分可以是用逗号连接的多条语句

C99规范里允许在循环的小括号里临时声明循环变量
这种循环变量只能在循环里使用，循环结束后就不能使用了

可以在循环里使用break;语句立刻结束循环的执行
执行完break;语句后循环里的一起语句都不再执行
    包括循环变量也不再变化
如果循环采用break;语句结束则结束后循环变量一定落在数字范围之内
如果编写循环的时候无法事先计算循环的次数
    就可以编写死循环，然后在循环里使用break;语句结束循环

可以在循环里使用continue;语句直接跳到循环大括号的末尾
中间的语句这次循环都不执行




















