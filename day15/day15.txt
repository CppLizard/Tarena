calloc()函数也可以动态分配内存
这个函数可以把动态分配的所有存储区内容清0
为了使用这个函数也需要包含stdlib.h头文件
这个函数需要两个参数，第一个参数表示希望分配的存储区个数
    第二个参数表示单个存储区的大小
这个函数的返回值表示分配好的第一个存储区的地址
这个函数也可能失败，如果失败则返回值是NULL

realloc()函数可以调整一段动态分配内存的大小
一般不要使用这个函数


文件都是采用二进制方式记录数字
如果文件里所有二进制数据都有对应的字符就把这种文件叫做文本文件
除了文本文件以外的都叫做二进制文件

文本文件和二进制文件分别采用了不同的方式进行操作
    (文本文件也可以当作二进制文件进行操作)

文件操作基本步骤:
1.打开文件->fopen()
2.操作文件->fread()+fwrite()
3.关闭文件->fclose()

fopen()函数用来打开文件，它需要两个参数
第一个参数代表文件路径
第二个参数代表文件打开方式(决定可以在程序中对文件进行什么操作)

打开方式有如下选择:
"r"     只能察看文件内容不能修改
        只能从文件头开始察看
        如果文件不存在打开会失败

"r+"    比"r"多了修改功能

"w"     只能修改文件内容不能察看
        只能从文件头开始修改
        如果文件不存在就创建文件
        如果文件已经存在就把文件内容都删除

"w+"    比"w"多了察看功能

"a"     只能修改不能察看
        修改方式是在文件原有内容后面追加新内容
        如果文件不存在就创建文件
        如果文件已经存在不会修改文件原有内容

"a+"    比"a"多了察看功能

"b"也是一种打开方式
它可以和前面的任何一种打开方式混合使用
它表示程序中要以二进制方式操作文件

fopen()函数的返回值应该记录在文件指针里
    程序中只能用文件指针代表文件
fopen()函数有可能失败，如果失败就返回NULL

一旦完成对文件的所有操作以后必须使用fclose()函数关闭文件
fclose()函数需要文件指针作为参数
文件关闭以后文件指针将成为野指针，必须恢复成空指针

文件操作分成两种:
1.把内存里一组连续存储区的内容拷贝到文件里
    这个叫写文件->fwrite()
2.把文件里一组连续存储区的内用拷贝到内存里
    这个叫读文件->fread()

fread()和fwrite()都是以二进制方式操作文件

这两个函数都需要四个参数:
1.第一个参数内存里第一个存储区的地址
2.第二个参数内存里单个存储区的大小
3.第三个参数希望操作的存储区个数
4.第四个参数文件指针

这两个函数都有返回值，它们的返回值表示实际操作的存储区个数

fprintf()函数可以把数据按照格式记录到文本文件里
这个函数的第一个参数是一个文件指针
    后面的参数和printf()函数的参数一样
    fprintf(p_file, "%d ", num);
这个函数以文本方式操作文件

fscanf()函数可以从文本文件里获得数字并记录到存储区里
这个函数的第一个参数是一个文件指针
    后面的参数和scanf()函数的参数一样
这个函数也是以文本方式操作文件

计算机里为每个文件保留了一个整数
    这个整数表示下一次读写文件的开始位置
这个位置一定在两个相邻的字节之间
这个整数的数值就是文件头到这个位置之间包含的字节个数
这个整数叫做文件的位置指针
每次从文件中读n个字节或向文件里写n个字节后
    位置指针都会向后移动n个字节

ftell()函数可以获得当前位置指针的数值

rewind()函数可以把位置指针的数值设置成0

fseek()函数可以把位置指针放到文件中的任何位置
在fseek()函数里需要设置一个基准位置以及目标位置到基准位置的距离

SEEK_SET    0   把文件头作为基准位置
SEEK_CUR    1   把当前位置作为基准位置
SEEK_END    2   把文件尾作为基准位置

如果目标位置在基准位置后边则距离用非负数表示
如果目标位置在基准位置前边则距离用负数表示

距离的数值就是目标位置和基准位置之间包含的字节个数

