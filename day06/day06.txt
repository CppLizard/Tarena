无法预知的数字叫随机数
rand()标准函数可以用来获得随机数
为了使用这个标准函数需要包含stdlib.h头文件

srand()标准函数用来设置随机数种子
这个标准函数可以把一个整数作为种子使用
不同的种子产生的随机数不同
为了使用这个标准函数也需要包含stdlib.h头文件
程序里只需要设置一次随机数种子

time()标准函数可以获得当前时间
这个函数用一个整数表示获得的当前时间
同一秒之内获得的代表时间的整数是同一个
为了使用这个标准函数需要包含time.h头文件

分支和循环都是流程控制语句，它们都可以让程序中的语句不再从上到下执行

goto语句也是流程控制语句
它可以把任何一条语句指定成下一条语句
一把不要使用goto语句

如果一个问题需要使用多组数字的变化过程描述，不同数字的变化频率不同
    这个时候就可以采用多重循环解决这样的问题
编写多重循环的时候外层循环的循环变量代表变化较慢的数字
    内层循环的循环变量代表变化较快的数字

while关键字也可以用来编写循环
while循环适合解决事先不知道次数的循环
while循环格式如下
while(逻辑表达式)
{
    反复执行的语句
}
反复执行大括号里面的语句直到逻辑表达式结果为假

把逻辑表达式写成1就成为死循环
while循环也可以使用break;和continue;
    语句来提前结束循环
while循环会交替执行逻辑表达式和大括号里面的语句
while循环第一步计算逻辑表达式
while循环有可能不执行大括号里面的语句

do...while也可以用来实现循环
把while循环大括号前面的内容挪到大括号后面
    然后在大括号前面保留一个do关键字
    成为do...while循环
do...while循环的小括号后面必须用分号结束
do...while循环也是交替执行大括号里面的语句和逻辑表达式
do...while循环首先执行大括号里面的语句
do...while循环可以保证把大括号里面的语句至少执行一次


缓冲区用来临时存放数字
scanf()标准函数工作的时候用到了输入缓冲区
用户在键盘上输入数字首先进入输入的缓冲区
    然后才会被程序得到
先进入输入缓冲区的数据必须首先处理
如果用户输入的数据格式和程序中需要的格式不一致
    就导致后面的数据得不到处理

使用如下两条语句可以把输入缓冲区里第一个换行字符和它前面的所有字符都丢掉
scanf("%*[^\n]");
scanf("%*c")

printf()函数在工作的时候使用了输出缓冲区
输出缓冲区里的内容只有在以下四种情况下才会显示在屏幕上
1.输出缓冲区里换行字符前面的内容会显示在屏幕上
2.当程序结束的时候程序放在输出缓冲区里的内容也会显示在屏幕上
3.当输出缓冲区充满的时候里的内容也会显示在屏幕上
4.使用fflush(stdout)语句可以把输出缓冲区里的内容强制显示在屏幕上
















